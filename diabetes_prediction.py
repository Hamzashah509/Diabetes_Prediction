# -*- coding: utf-8 -*-
"""Diabetes_Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dVwvR7hMNgTzD7SMYtmiuBvJI9vaRkG1
"""



"""Importing Dependencies"""

#importing the basic ones and then gradually importing more as per need
import numpy as np
import pandas as pd

"""Data collection and preprocessing"""

diabetes_dataset = pd.read_csv('/content/diabetes.csv.csv')

import seaborn as sns
import matplotlib.pyplot as plt


# Create a pairplot
sns.pairplot(diabetes_dataset, hue='Outcome', diag_kind='kde')

# Display the plot
plt.show()

diabetes_dataset.head()

diabetes_dataset.shape

diabetes_dataset.describe()

diabetes_dataset.tail()

diabetes_dataset['Outcome'].value_counts()

#dividing the dataset into features and labels
X = diabetes_dataset.drop(columns = 'Outcome', axis = 1)
Y = diabetes_dataset['Outcome']

print(X)

print(Y)

#checking missing values in the dataset
print(X.isnull().sum())

# Data Standardization

from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()

X_scaled = scaler.fit_transform(X)

X = X_scaled

print(X[0])
print(X[1])

print(X)

"""Train Test split"""

from sklearn.model_selection import train_test_split

X_train,X_test,Y_train,Y_test = train_test_split(X,Y,stratify=Y, random_state =2)

"""Traing the Model with Support Vector Machine"""

from sklearn import svm

classifier = svm.SVC(kernel='linear')

classifier.fit(X_train,Y_train)

"""Model Evaluation"""

from sklearn.metrics import accuracy_score

#Accuracy of traing data
X_train_prediction = classifier.predict(X_train)

train_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print('Accuracy : ', train_data_accuracy)

#Accuracy of test data
X_test_prediction = classifier.predict(X_test)

test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print('Accuracy : ', test_data_accuracy)

"""Bar PLOT"""

# Create a bar plot for the distribution of 'Outcome' classes
sns.countplot(x='Outcome', data=diabetes_dataset)

# Set labels and title
plt.xlabel('Outcome (0: Not Diabetic, 1: Diabetic)')
plt.ylabel('Count')
plt.title('Distribution of Diabetes Outcome')

# Display the plot
plt.show()

"""Makaing a prediction system

"""

#step 1 : input data
input_data = (-0.84488505 ,-1.12339636, -0.16054575,  0.53090156, -0.69289057, -0.68442195,
 -0.36506078, -0.19067191)
print(input_data)

#step 2 : convert input data into numpy array
input_data_as_numpy_array = np.asarray(input_data)
print(input_data_as_numpy_array)

#step 3 : reshape for one instances
input_data_reshape = input_data_as_numpy_array.reshape(1,-1)
print(input_data_reshape)

#step 4 : Standardize the data
#input_data_reshape_scaled = scaler.transform(input_data_reshape)
#print(input_data_reshape_scaled)

#step 5 : prediction
prediction = classifier.predict(input_data_reshape)
print(prediction[0])


if(prediction[0] == 1):
  print("The person is diabetic")
else:
  print("The person is not diabestic")





